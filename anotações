Para iniciar um projeto já predefinido no React utiliza-se comandos do Vite:

==> npm create vite@latest nomeDoApp --template react

Dentro do projeto criado, no terminal:

==> npm install (para trazer a pasta node_modules)

rodar o projeto:

==> npm run dev

JSX => Sintaxe que o React usa para utilizar a interface de forma declarativa.

As funções tem que ter um retorno que retornam conteúdo HTML e tudo é feito a partir do JavaScript.

Uma expressão JXS tem que retornar somente um elemento, então temos que embrulhar todo o html que estamos retornando para se transformar num elemento só.

=> Arquivos css:

global.css : Geralmente contém os resets do layout como

*{
    margin:0;
    padding:0;
    box-sizing:border-box;
}

OBS: Importar para outro elemento jsx você tem que colocar a extensão .css
mas outros arquivos não precisa;

==> <div className='nomedaclasse'></div> para declarar uma class dentro do componente jsx

=> Armazenar um estado

==> const [nomedavariavel, setNomedaVariavel(função que atualiza o estado)] = useState();

ex.: <input onChange={e => setStudentName(e.target.value)}>

Podemos declarar variáveis dentro da função com let variavel mas elas servirão mais como apoio e não vão refletir na nossa interface porque para isso utilizaremos os estados.

=> Propriedade key

==> <Card key={valorUnico} (...) >

a propriedade key serve para distinguir os elementos gerados quando estão dentro de uma lista de repetição a cada criação o elemento gerado deve possuir uma key única não podendo repetir. Geralmente utilizamos o id do objeto.

=> Hooks

==> use<NomedoHook>
ex.: useState()

São funções que auxiliam a conectar o estado das variáveis com o ciclo do componente

==> useEffect(() => {
    //corpo do useEffect é tipo um ngInit, uma função que é executada assim que a interface é renderizada
}, [//estados que o useEffect depende, se estiver vazio vai ser executado apenas uma vez]);

No useEffect não tem como usar o async diretamente como async useEffect(){...}
mas posso declarar uma função async dentro do useEffect 
Ex.:
    useEffect(){
        async function fetch(){
            (...)
        }
    }

  


 
